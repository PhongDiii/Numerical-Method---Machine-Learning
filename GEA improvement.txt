%___________________________________________________________________%
%           Geyser Algorithm (GEA) source codes version 1.1         %
%                                                                   %
%                                                                   %
%             Homepages:https://www.optim-app.com                   %
%                                                                   %
%          Authors: Mojtaba Ghasemi, Mohsen Zare, Amir Zahed        %
%       Mohammad‑Amin Akbari, Seyedali Mirjalili,Laith Abualigah    %
%              Title:   Geyser Inspired Algorithm:                  %
%            A New Geological‑inspired Meta‑heuristic               %
%       for Real‑parameter and Constrained Engineering Optimization %
%                                                                   %
%              Journal of Bionic Engineering (2023                  %
%           https://doi.org/10.1007/s42235-023-00437-8              %
%___________________________________________________________________%

clc;
close all
clear all;

% Parameters
VarMin = -100;                  % Decision Variables Lower Bound
VarMax = -VarMin;              % Decision Variables Upper Bound
nVar = 30;                     % Number of Decision Variables
VarSize = [1 nVar];            % Decision Variables Matrix Size
Nc = 40;                       % Number of Channels
FEs = 5000;                  % Maximum Number of Function Evaluations  (Changed to 5000)
nPop = 60;                     % Number of Geysers (Swarm Size)
tournamentSize = 5;             % Tournament selection parameter
epsilon = 1e-6;                 % Epsilon for CostFunction

% Function to be optimized
CostFunction = @(x) sum(log(epsilon + x.^2), 2);  % Modified CostFunction

% Initialization
Geyser.Position = [];          % Empty Geyser Structure
Geyser.Cost = [];
pop = repmat(Geyser, nPop, 1);   % Initialize Population Array
BestSol.Cost = inf;            % Initialize Best Solution Ever Found
BestCost = zeros(FEs, 1);     % Array to store best cost history

% Create Initial population of Geysers
for i=1:nPop
    pop(i).Position = unifrnd(VarMin, VarMax, VarSize);
    pop(i).Cost = CostFunction(pop(i).Position);
    if pop(i).Cost <= BestSol.Cost
        BestSol = pop(i);
    end
    BestCost(i) = BestSol.Cost;
end

it = nPop;

while it <= FEs
    for i=1:nPop
        %%%%%%%%%%%%%%%  Implementing Eq(3)   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        for ii=1:nPop
            D1(ii) = sum(pop(i).Position.*pop(ii).Position) / (((sum(pop(i).Position.^2)*sum(pop(ii).Position.^2)))^0.5); % Eq(3)
            if ii == i
                D1(ii) = inf;
            end
        end
        S1 = min(D1);
        [~,j1] = find(S1 == D1);

        %%%% Calculating the pressure value in Eq(6)  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        [CS, Sortorder] = sort([pop.Cost]);
        dif = (CS(end)-CS(1));            % fmax-fmin  Eq(6)
        G = ((pop(i).Cost-CS(1))/dif);    % f(i)-fmin  Eq(6)
        if dif == 0;
            G = 0;
        end
        if it == 1
            it = 2;
        end
        P_i(i) = (((G^(2/it))-(G^((it+1)/it)))^0.5)*((it/(it-1))^0.5);  % Pi Eq(6)

        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        %%%%%%%%%%%%%%%  Search for channels using Tournament Selection   %%%%%
        ImpFitness = 0;
        for ii=1:Nc
            ImpFitness = ImpFitness + pop(ii).Cost;
        end
        p = [];
        if ImpFitness == 0
            ImpFitness = 1e-320;
        end
        for ii=1:Nc
            p(ii) = pop(ii).Cost/ImpFitness;    % Eq(1)
        end
        
        % Tournament Selection
        i1 = TournamentSelection(pop, p, tournamentSize);

        flag = 0;
        %%%%%%%%%%%%%%%  Implementing Eq(5)   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        newsol.Position = pop(j1(1)).Position + (rand(VarSize)).*(pop(i1).Position - pop(j1(1)).Position) + (rand(VarSize)).*(pop(i1).Position - pop(i).Position);
        newsol.Position = max(newsol.Position, VarMin);
        newsol.Position = min(newsol.Position, VarMax);
        newsol.Cost = CostFunction(newsol.Position);
        it = it + 1;
        if newsol.Cost <= pop(i).Cost
            pop(i) = newsol;
            flag = 0;
        end
        if newsol.Cost <= BestSol.Cost
            BestSol = newsol;
        end
        BestCost(it) = BestSol.Cost;

        if flag == 0
            % Implement Roulette Wheel Selection with Elitism
            i2 = RouletteWheelSelection(1 - p);
            %%%%%%%%%%%%%%%  Implementing Eq(8)   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            newsol.Position = pop(i2).Position + rand*(P_i(i)-rand)*unifrnd(1*VarMin,1*VarMax,VarSize);
            newsol.Position = max(newsol.Position, VarMin);
            newsol.Position = min(newsol.Position, VarMax);
            newsol.Cost = CostFunction(newsol.Position);
            it = it + 1;
            if newsol.Cost <= pop(i).Cost
                pop(i) = newsol;
            end
            if newsol.Cost <= BestSol.Cost
                BestSol = newsol;
            end
            BestCost(it) = BestSol.Cost;
        end
    end
    [~, Sortorder] = sort([pop.Cost]);
    pop = pop(Sortorder);
    if mod(it, 100) == 0
        disp(['Iteration ' num2str(it) ': Best Cost = ' num2str(BestCost(it))]);
    end
end

% ... (các phần code sau) ...

% Function to perform Tournament Selection
function selectedChannel = TournamentSelection(pop, p, tournamentSize)
    tournament = randi(length(p), 1, tournamentSize);
    [~, index] = min(p(tournament));
    selectedChannel = tournament(index);
end

% Function to perform Roulette Wheel Selection
function selectedChannel = RouletteWheelSelection(p)
    c = cumsum(p);
    r = rand();
    selectedChannel = find(r <= c, 1, 'first');
end
169